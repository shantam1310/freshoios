import { __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AllInOneSDK = /** @class */ (function (_super) {
    __extends(AllInOneSDK, _super);
    function AllInOneSDK() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AllInOneSDK.prototype.startTransaction = function (options) { return cordova(this, "startTransaction", {}, arguments); };
    AllInOneSDK.pluginName = "AllInOneSDK";
    AllInOneSDK.plugin = "cordova-paytm-allinonesdk";
    AllInOneSDK.pluginRef = "AllInOneSDK";
    AllInOneSDK.repo = "https://github.com/paytm/paytm-allinonesdk-ionic-cordova.git";
    AllInOneSDK.platforms = ["Android", "iOS"];
    return AllInOneSDK;
}(IonicNativePlugin));
export { AllInOneSDK };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvYWxsLWluLW9uZS1zZGsvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLDhCQUEwRixNQUFNLG9CQUFvQixDQUFDO0FBQzVIO0FBR2EsSUFzQ29CLCtCQUFpQjtBQUFDO0FBRy9CO0FBQ0Y7QUFBTSxJQU10QixzQ0FBZ0IsYUFBQyxPQUE0QjtBQU9uQztBQUE0QztBQUd0RDtBQUNxQjtBQUlYO0FBQWdELHNCQXBFNUQ7QUFBRSxFQTJDK0IsaUJBQWlCO0FBRWxELFNBRmEsV0FBVztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIENvcmRvdmFJbnN0YW5jZSwgSW5zdGFuY2VQcm9wZXJ0eSwgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEBuYW1lIEFsbEluT25lU0RLXG4gKiBAZGVzY3JpcHRpb25cbiAqIFBheXRtIEFsbC1pbi1PbmUgU0RLIHBsdWdpbiBmb3IgQ29yZG92YS9Jb25pYyBBcHBsaWNhdGlvbnNcbiAqIFBheXRtIEFsbC1pbi1PbmUgU0RLIHByb3ZpZGVzIGEgc3dpZnQsIHNlY3VyZSBhbmQgc2VhbWxlc3MgcGF5bWVudCBleHBlcmllbmNlIHRvIHlvdXIgdXNlcnMgYnkgaW52b2tpbmcgdGhlIFBheXRtIGFwcCAoaWYgaW5zdGFsbGVkIG9uIHlvdXIgdXNlcuKAmXMgc21hcnRwaG9uZSkgdG8gY29tcGxldGUgcGF5bWVudCBmb3IgeW91ciBvcmRlci5cbiAqIFBheXRtIEFsbC1pbi1PbmUgU0RLIGVuYWJsZXMgcGF5bWVudCBhY2NlcHRhbmNlIHZpYSBQYXl0bSB3YWxsZXQsIFBheXRtIFBheW1lbnRzIEJhbmssIHNhdmVkIERlYml0L0NyZWRpdCBjYXJkcywgTmV0IEJhbmtpbmcsIEJISU0gVVBJIGFuZCBFTUkgYXMgYXZhaWxhYmxlIGluIHlvdXIgY3VzdG9tZXLigJlzIFBheXRtIGFjY291bnQuIElmIFBheXRtIGFwcCBpcyBub3QgaW5zdGFsbGVkIG9uIGEgY3VzdG9tZXIncyBkZXZpY2UsIHRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIHByb2Nlc3NlZCB2aWEgd2ViIHZpZXcgd2l0aGluIHRoZSBBbGwtaW4tT25lIFNESy5cbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IFBheXRtIEFsbC1pbi1PbmUgU0RLLCBwbGVhc2UgdmlzaXQgaHR0cHM6Ly9kZXZlbG9wZXIucGF5dG0uY29tL2RvY3MvYWxsLWluLW9uZS1zZGsvaHlicmlkLWFwcHMvY29yZG92YS9cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEFsbEluT25lU0RLIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9hbGwtaW4tb25lLXNkay9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsbEluT25lU0RLOiBBbGxJbk9uZVNESykgeyB9XG4gKlxuICogLi4uXG4gKlxuICogRm9yIGJlbG93IHBhcmFtZXRlcnMgc2VlIFtkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5wYXl0bS5jb20vZG9jcy9hbGwtaW4tb25lLXNkay9oeWJyaWQtYXBwcy9jb3Jkb3ZhLylcbiAqIGxldCBwYXltZW50SW50ZW50ID0geyBtaWQgOiBtZXJjaGFudElELCBvcmRlcklkOiBvcmRlcklkLCB0eG5Ub2tlbjogdHJhbnNhY3Rpb25Ub2tlbiwgYW1vdW50OiBhbW91bnQsIGlzU3RhZ2luZzogaXNTdGFnaW5nLCBjYWxsYmFja1VybDpjYWxsQmFja1VSTCwgIHJlc3RyaWN0QXBwSW52b2tlOnJlc3RyaWN0QXBwSW52b2tlICB9XG4gKlxuICogdGhpcy5hbGxJbk9uZVNESy5zdGFydFRyYW5zYWN0aW9uKHBheW1lbnRJbnRlbnQpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKlxuICogRm9yIGlPUzpcbiAqIEFmdGVyIGFkZGluZyB0aGUgcGx1Z2luLCBvcGVuIHRoZSBpT1MgcHJvamVjdCwgeW91IGNhbiBmaW5kIHRoZSBzYW1lIGF0IDxwcm9qZWN0TmFtZT4vcGxhdGZvcm1zL2lvcy5cbiAqIEluIGNhc2UgbWVyY2hhbnQgZG9u4oCZdCBoYXZlIGNhbGxiYWNrIFVSTCwgQWRkIGFuIGVudHJ5IGludG8gSW5mby5wbGlzdCBMU0FwcGxpY2F0aW9uUXVlcmllc1NjaGVtZXMoQXJyYXkpIEl0ZW0gMCAoU3RyaW5nKS0+IHBheXRtXG4gKiBBZGQgYSBVUkwgU2NoZW1lIOKAnHBheXRt4oCdK+KAnU1JROKAnVxuICpcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdBbGxJbk9uZVNESycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGF5dG0tYWxsaW5vbmVzZGsnLFxuICBwbHVnaW5SZWY6ICdBbGxJbk9uZVNESycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcGF5dG0vcGF5dG0tYWxsaW5vbmVzZGstaW9uaWMtY29yZG92YS5naXQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsJ2lPUyddXG59KVxuZXhwb3J0IGNsYXNzIEFsbEluT25lU0RLIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiBQYXl0bSBBcHBsaWNhdGlvbiBpcyBhdmFpbGFibGUgb24gdGhlIGRldmljZS5cbiAgICogSWYgUGF5dG0gZXhpc3RzIHRoZW4gaXQgaW52b2tlcyBQYXl0bSBBcHBsaWNhdGlvbiB3aXRoIHRoZSBwYXJhbWV0ZXJzIHNlbnQgYW5kIGNyZWF0ZXMgYW4gb3JkZXIuXG4gICAqIElmIHRoZSBQYXl0bSBBcHBsaWNhdGlvbiBpcyBub3QgYXZhaWxhYmxlIHRoZSB0cmFuc2FjdGlvbiBpcyBjb250aW51ZWQgb24gYSB3ZWJWaWV3IHdpdGhpbiBBbGwtaW4tT25lIFNESy5cbiAgICogQHBhcmFtIG9wdGlvbnMge1BheW1lbnRJbnRlbnRNb2RlbH0gVGhlc2UgcGFyYW1ldGVycyBhcmUgcmVxdWlyZWQgYW5kIHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYW4gb3JkZXIuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8UGF5dG1SZXNwb25zZT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhIHRyYW5zYWN0aW9uIGNvbXBsZXRlcyhib3RoIGZhaWxlZCBhbmQgc3VjY2Vzc2Z1bCkuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0YXJ0VHJhbnNhY3Rpb24ob3B0aW9ucyA6IFBheW1lbnRJbnRlbnRNb2RlbCk6IFByb21pc2U8UGF5dG1SZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG59XG5cbi8qKlxuICogVGhlIHJlc3BvbnNlIHRoYXQgd2lsbCBiZSByZWNpZXZlZCB3aGVuIGFueSB0cmFuc2FjdGlvbiBpcyBjb21wbGV0ZWRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXl0bVJlc3BvbnNle1xuICAgIG1lc3NhZ2UgOiBzdHJpbmc7XG4gICAgcmVzcG9uc2UgOiBzdHJpbmc7IC8vIEEgc3RyaW5naWZpZWQgcmVzcG9uc2Ugb2YgYSBoYXNobWFwIHJldHVybmVkIGZyb20gQWxsLWluLU9uZSBTREtcbn1cblxuLyoqXG4gKiBGb3IgYmVsb3cgcGFyYW1ldGVycyBzZWUgW2RvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLnBheXRtLmNvbS9kb2NzL2FsbC1pbi1vbmUtc2RrL2h5YnJpZC1hcHBzL2NvcmRvdmEvKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnRJbnRlbnRNb2RlbHtcbiAgICBtaWQgOiBzdHJpbmc7IC8vIE1lcmNoYW50IElEXG4gICAgb3JkZXJJZCA6IHN0cmluZzsgLy8gT3JkZXIgSURcbiAgICB0eG5Ub2tlbiA6IHN0cmluZzsgLy8gVHJhbnNhY3Rpb24gVG9rZW5cbiAgICBhbW91bnQgOiBzdHJpbmc7IC8vIEFtb3VudFxuICAgIGlzU3RhZ2luZzogYm9vbGVhbjsgLy8gRW52aXJvbm1lbnRcbiAgICBjYWxsYmFja1VybDogc3RyaW5nOyAvLyBDYWxsYmFjayBVUkxcbiAgICByZXN0cmljdEFwcEludm9rZTogYm9vbGVhbjsgLy8gVG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIHBheXRtIGFwcCBpbnZvY2F0aW9uXG59XG4iXX0=